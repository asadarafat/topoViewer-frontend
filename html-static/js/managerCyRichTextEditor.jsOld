<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Multiple Textbox Nodes with Quill & Cytoscape.js</title>

  <!-- Bulma CSS (optional for styling) -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css">

  <!-- Quill CSS (Snow theme) -->
  <link href="https://cdn.jsdelivr.net/npm/quill@2.0.3/dist/quill.snow.css" rel="stylesheet">

  <!-- highlight.js style -->
  <link href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/atom-one-dark.min.css" rel="stylesheet">

  <style>
    html, body {
      margin: 0;
      padding: 0;
      height: 100%;
      background-color: #222;
    }

    /* Cytoscape container */
    #cy {
      width: 100%;
      height: 100%;
      position: relative;
      border: 0px solid #ccc;
      margin: 0 auto;
    }

    /* Overlay container (textbox overlay) */
    .html-label {
      position: absolute;
      pointer-events: none; /* let events pass through by default (read-only mode) */
      background: #eee;
      width: 650px; /* default overlay width */
      height: 250px; /* default overlay height */
      padding: 1rem;
      border-radius: 8px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
      z-index: 9999;
      display: flex;
      flex-direction: column;
    }

    /* Quill toolbar container, initially hidden */
    [id^="toolbar-container-"] {
      display: none;
      margin-bottom: 0.5rem;
      pointer-events: auto; /* ensure the toolbar can be clicked */
    }

    /* Editor area */
    [id^="editor-"] {
      flex: 1;
      overflow: auto;
      border: 1px solid #ccc;
      border-radius: 4px;
      margin-top: 0.5rem;
    }

    /* Button row styling */
    .button-row {
      margin-top: 0.5rem;
    }

    /* Resize handles */
    .resize-handle {
      width: 20px;
      height: 20px;
      position: absolute;
      pointer-events: auto; /* so we can grab the handle */
      background: rgba(0,0,0,0); /* transparent, but you could style it differently */
    }
    .resize-handle.bottom-right {
      bottom: 0;
      right: 0;
      cursor: nwse-resize;
    }
    .resize-handle.bottom-center {
      bottom: 0;
      left: 50%;
      transform: translateX(-50%);
      cursor: s-resize;
    }
    .resize-handle.right-center {
      top: 50%;
      right: 0;
      transform: translateY(-50%);
      cursor: e-resize;
    }

    /* Disable text selection while resizing */
    .no-select {
      user-select: none;
    }

    /* Ensure buttons and dropdowns capture events (while editing) */
    button, select {
      pointer-events: auto;
    }
  </style>
</head>
<body>

  <!-- Cytoscape container -->
  <div id="cy"></div>

  <!-- Scripts -->
  <!-- 1) Cytoscape -->
  <script src="https://cdn.jsdelivr.net/npm/cytoscape@3.28.1/dist/cytoscape.min.js"></script>
  <!-- 2) highlight.js -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>
  <!-- 3) Quill (v2 beta) -->
  <script src="https://cdn.jsdelivr.net/npm/quill@2.0.3/dist/quill.js"></script>

  <script>
    "use strict";

    /**************************************************************************
     * 1) SET UP CYTOSCAPE
     **************************************************************************/

    // Example SVG for 'router' nodes (optional, just for demonstration)
    const svgNodeStringRouter = `
      <svg
        xmlns="http://www.w3.org/2000/svg"
        style="enable-background:new 0 0 120 120;"
        viewBox="0 0 120 120"
        width="120px"
        height="120px"
        fill="none"
      >
        <style type="text/css">
          .st0 { fill: #001135; }
          .st1 { fill: none; stroke: #FFFFFF; stroke-width: 4; stroke-linecap: round; stroke-linejoin: round; stroke-miterlimit: 10; }
        </style>
        <rect width="120" height="120" class="st0" />
        <g>
          <g>
            <path d="M71.7,19.7V48h28" class="st1" />
            <path d="M91.2,38.5l7.5,7.6c1.3,1.3,1.3,3.1,0,4.3L91.1,58" class="st1" />
          </g>
          <g>
            <path d="M20,47.8h28.4v-28" class="st1" />
            <path d="M38.8,28.3l7.6-7.5c1.3-1.3,3.1-1.3,4.3,0l7.7,7.6" class="st1" />
          </g>
          <g>
            <path d="M48,100.3V72H20" class="st1" />
            <path d="M28.5,81.5L21,73.9c-1.3-1.3-1.3-3.1,0-4.3l7.6-7.7" class="st1" />
          </g>
          <g>
            <path d="M100,71.9H71.6v28" class="st1" />
            <path d="M81.2,91.4l-7.6,7.5c-1.3,1.3-3.1,1.3-4.3,0l-7.7-7.6" class="st1" />
          </g>
        </g>
      </svg>
    `;
    const encodedSVG = "data:image/svg+xml;utf8," + encodeURIComponent(svgNodeStringRouter);

    // Initialize Cytoscape with some sample nodes
    const cy = cytoscape({
      container: document.getElementById("cy"),
      elements: [
        // Some router nodes for demonstration
        {
          data: { id: "router1", topoViewerRole: "pe" },
          position: { x: 100, y: 50 },
        },
        {
          data: { id: "router2", topoViewerRole: "pe" },
          position: { x: 300, y: 50 },
        },
        { data: { id: "link1", source: "router1", target: "router2" } },
      ],
      style: [
        {
          selector: 'node[topoViewerRole="pe"]',
          style: {
            width: 50,
            height: 50,
            "background-image": encodedSVG,
            "background-fit": "contain",
            "border-width": 0.5,
            "border-color": "#FFFFFF",
            "label": "data(id)",
            "color": "#FFFFFF",
            "text-background-color": "black",
            "text-background-opacity": 0.5,
            "text-valign": "bottom",
            "text-halign": "center",
            shape: "rectangle",
            "font-size": "12px",
          },
        },
        // We'll define the styling for 'textbox' nodes programmatically as well:
        {
          selector: 'node[topoViewerRole="textbox"]',
          style: {
            "background-color": "#222",
            width: 40,
            height: 40,
            shape: "round-rectangle",
            label: "",
          },
        },
        // Edge styling
        {
          selector: "edge",
          style: {
            width: 2,
            "line-color": "#FFF",
          },
        },
      ],
      layout: { name: "preset" },
    });


    /**************************************************************************
     * 2) CREATE MULTIPLE TEXTBOX NODES PROGRAMMATICALLY
     **************************************************************************/

    // We'll keep references to the overlays here if we need them
    const textboxOverlays = {};

    /**
     * Create a new Cytoscape node with topoViewerRole="textbox"
     * and link it to a custom overlay with Quill.
     */
    function createTextboxNode(cy, nodeId, position = { x: 150, y: 100 }) {
      // 1) Add the node to Cytoscape
      const newNode = cy.add({
        group: 'nodes',
        data: {
          id: nodeId,
          topoViewerRole: "textbox",
          label: '',
          textEditorData: '',
        },
        position
      });

      // 2) Create the overlay for this node
      const overlay = createTextboxOverlay(cy, newNode);

      // 3) Store the overlay in our dictionary (if we need to reference it later)
      textboxOverlays[nodeId] = overlay;

      return newNode;
    }

    /**
     * Create the actual HTML overlay and attach all logic:
     * - Quill initialization
     * - Resizing
     * - Buttons: Edit, Save, Cancel
     */
    function createTextboxOverlay(cy, node) {
      // Create the main container
      const section = document.createElement("section");
      section.className = "html-label columns is-mobile is-multiline";
      section.id = node.id(); // use the node's ID as the section ID

      // Unique IDs for sub-elements
      const toolbarId = "toolbar-container-" + node.id();
      const editorId = "editor-" + node.id();
      const editBtnId = "editBtn-" + node.id();
      const saveBtnId = "saveBtn-" + node.id();
      const cancelBtnId = "cancelBtn-" + node.id();

      // Create the inner HTML structure
      section.innerHTML = `
        <!-- Quill toolbar container -->
        <div id="${toolbarId}">
          <span class="ql-formats">
            <select class="ql-font"></select>
            <select class="ql-size"></select>
          </span>
          <span class="ql-formats">
            <button class="ql-bold"></button>
            <button class="ql-italic"></button>
            <button class="ql-underline"></button>
            <button class="ql-strike"></button>
          </span>
          <span class="ql-formats">
            <select class="ql-color"></select>
            <select class="ql-background"></select>
          </span>
          <span class="ql-formats">
            <button class="ql-script" value="sub"></button>
            <button class="ql-script" value="super"></button>
          </span>
          <span class="ql-formats">
            <button class="ql-header" value="1"></button>
            <button class="ql-header" value="2"></button>
            <button class="ql-blockquote"></button>
            <button class="ql-code-block"></button>
          </span>
          <span class="ql-formats">
            <button class="ql-list" value="ordered"></button>
            <button class="ql-list" value="bullet"></button>
            <button class="ql-indent" value="-1"></button>
            <button class="ql-indent" value="+1"></button>
          </span>
          <span class="ql-formats">
            <button class="ql-direction" value="rtl"></button>
            <select class="ql-align"></select>
          </span>
          <span class="ql-formats">
            <button class="ql-link"></button>
            <button class="ql-image"></button>
            <button class="ql-video"></button>
            <button class="ql-formula"></button>
          </span>
          <span class="ql-formats">
            <button class="ql-clean"></button>
          </span>
        </div>

        <!-- Quill editor area -->
        <div id="${editorId}"></div>

        <!-- Resize handles -->
        <div class="resize-handle bottom-right"></div>
        <div class="resize-handle bottom-center"></div>
        <div class="resize-handle right-center"></div>

        <!-- Buttons row -->
        <div class="button-row">
          <button id="${editBtnId}" class="button is-link is-small">Edit</button>
          <button id="${saveBtnId}" class="button is-link is-small" style="display: none;">Save</button>
          <button id="${cancelBtnId}" class="button is-link is-small" style="display: none;">Cancel</button>
        </div>
      `;

      // Add to the DOM
      document.body.appendChild(section);

      // Initialize Quill
      const quill = new Quill("#" + editorId, {
        theme: "snow",
        syntax: true,
        modules: {
          toolbar: "#" + toolbarId,
          syntax: {
            highlight: text => hljs.highlightAuto(text).value
          },
        },
        readOnly: true, // start read-only
      });

      // Set some initial code snippet
      const Delta = Quill.import('delta');
      quill.setContents(
        new Delta()
          .insert('const language = "JavaScript";')
          .insert('\n', { 'code-block': true })
          .insert('console.log("I love " + language + "!");')
          .insert('\n', { 'code-block': true })
      );

      // Grab references to relevant DOM elements
      const toolbarContainer = section.querySelector("#" + toolbarId);
      const editBtn = section.querySelector("#" + editBtnId);
      const saveBtn = section.querySelector("#" + saveBtnId);
      const cancelBtn = section.querySelector("#" + cancelBtnId);
      const resizeHandles = section.querySelectorAll(".resize-handle");
      const editorDiv = section.querySelector("#" + editorId);

      // Positioning function
      function updateOverlay() {
        const pos = node.renderedPosition();
        const cyRect = cy.container().getBoundingClientRect();
        const overlayWidth = section.offsetWidth;
        const overlayHeight = section.offsetHeight;

        // Center the overlay over the node
        section.style.left = `${cyRect.left + pos.x - overlayWidth / 2}px`;
        section.style.top = `${cyRect.top + pos.y - overlayHeight / 2}px`;

        // Resize the node so it "covers" the overlay area
        const paddingInPx = 30;
        const zoomLevel = cy.zoom();
        const newWidth = (overlayWidth + paddingInPx) / zoomLevel;
        const newHeight = (overlayHeight + paddingInPx) / zoomLevel;
        node.style({
          width: newWidth,
          height: newHeight,
        });

        // Adjust editor height considering toolbar
        const toolbarHeight = toolbarContainer.offsetHeight;
        editorDiv.style.height = `calc(100% - ${toolbarHeight + 60}px)`;
      }

      // Debounce calls to updateOverlay
      let updateTimeout = null;
      function debounceOverlayUpdate() {
        if (updateTimeout) clearTimeout(updateTimeout);
        updateTimeout = setTimeout(updateOverlay, 0);
      }

      // Listen for events that change node position/size
      cy.on("zoom pan resize", debounceOverlayUpdate);
      node.on("position", debounceOverlayUpdate);
      window.addEventListener("resize", debounceOverlayUpdate);

      // Initial call
      updateOverlay();

      // Implement resizing
      let isResizing = false;
      let initialX = 0;
      let initialY = 0;
      let initialWidth = section.offsetWidth;
      let initialHeight = section.offsetHeight;

      function throttle(func, limit) {
        let lastFunc;
        let lastRan;
        return function() {
          const context = this;
          const args = arguments;
          if (!lastRan) {
            func.apply(context, args);
            lastRan = Date.now();
          } else {
            clearTimeout(lastFunc);
            lastFunc = setTimeout(function() {
              if ((Date.now() - lastRan) >= limit) {
                func.apply(context, args);
                lastRan = Date.now();
              }
            }, limit - (Date.now() - lastRan));
          }
        };
      }

      resizeHandles.forEach(handle => {
        handle.addEventListener("mousedown", (e) => {
          isResizing = true;
          initialX = e.clientX;
          initialY = e.clientY;
          initialWidth = section.offsetWidth;
          initialHeight = section.offsetHeight;
          document.body.classList.add("no-select"); // disable text selection
          e.stopPropagation(); // so we don't pass the event through to Cytoscape
        });
      });

      document.addEventListener("mousemove", throttle((e) => {
        if (isResizing) {
          const deltaX = e.clientX - initialX;
          const deltaY = e.clientY - initialY;
          const newWidth = initialWidth + deltaX;
          const newHeight = initialHeight + deltaY;

          // Minimum size
          if (newWidth >= 40 && newHeight >= 40) {
            section.style.width = `${newWidth}px`;
            section.style.height = `${newHeight}px`;
            updateOverlay(); // reflect new size in node
          }
        }
      }, 16));

      document.addEventListener("mouseup", () => {
        if (isResizing) {
          document.body.classList.remove("no-select");
          isResizing = false;
        }
      });

      // Edit/Save/Cancel logic
      let savedDelta = null;

      editBtn.addEventListener("click", (e) => {
        e.stopPropagation();
        quill.enable(true);
        toolbarContainer.style.display = "block";
        editBtn.style.display = "none";
        saveBtn.style.display = "inline-block";
        cancelBtn.style.display = "inline-block";
        quill.focus();
        updateOverlay();
        section.style.pointerEvents = "auto";
      });

      saveBtn.addEventListener("click", (e) => {
        e.stopPropagation();
        savedDelta = quill.getContents();
        node.data("textEditorData", savedDelta);
        quill.enable(false);
        toolbarContainer.style.display = "none";
        editBtn.style.display = "inline-block";
        saveBtn.style.display = "none";
        cancelBtn.style.display = "none";
        updateOverlay();
        section.style.pointerEvents = "none";
      });

      cancelBtn.addEventListener("click", (e) => {
        e.stopPropagation();
        const revertedDelta = node.data("textEditorData") || quill.getContents();
        quill.setContents(revertedDelta);
        quill.enable(false);
        toolbarContainer.style.display = "none";
        editBtn.style.display = "inline-block";
        saveBtn.style.display = "none";
        cancelBtn.style.display = "none";
        updateOverlay();
        section.style.pointerEvents = "none";
      });

      // Pass clicks to Cytoscape (if not on toolbar or resize handle)
      section.addEventListener("mousedown", (e) => {
        if (!e.target.closest("#" + toolbarId) &&
            !e.target.closest(".resize-handle")) {
          const event = new MouseEvent("mousedown", {
            bubbles: true,
            cancelable: true,
            clientX: e.clientX,
            clientY: e.clientY,
          });
          cy.container().dispatchEvent(event);
        }
      });
      section.addEventListener("click", (e) => {
        if (!e.target.closest("#" + toolbarId) &&
            !e.target.closest(".resize-handle")) {
          const event = new MouseEvent("click", {
            bubbles: true,
            cancelable: true,
            clientX: e.clientX,
            clientY: e.clientY,
          });
          cy.container().dispatchEvent(event);
        }
      });

      // Return references if you need them
      return { section, quill };
    }

    /**************************************************************************
     * 3) DEMO: CREATE MULTIPLE TEXTBOXES
     **************************************************************************/

    // You can create as many textboxes as you want
    createTextboxNode(cy, "textbox1", { x: 200, y: 200 });
    createTextboxNode(cy, "textbox2", { x: 400, y: 300 });
    createTextboxNode(cy, "textbox3", { x: 600, y: 200 });
    createTextboxNode(cy, "textbox4", { x: 600, y: 200 });

  </script>
</body>
</html>
